[["index.html", "Reproducible Medical Research with R Chapter 1 Preface 1.1 Who This Book is For 1.2 Prerequisites 1.3 The Spiral of Success Structure 1.4 Motivation for this Book 1.5 The Scientific Reproducibility Crisis 1.6 What this Book is Not 1.7 Some Guideposts", " Reproducible Medical Research with R Peter D.R. Higgins, MD, PhD, MSc 2020-12-12 Chapter 1 Preface Welcome to Reproducible Medical Research with R (RMWR). I hope that this book meets your needs. 1.1 Who This Book is For This is a book for anyone in the medical field interested in analyzing the data available to them to better understand health, disease, or delivery of care. This could include nurses, dieticians, psychologists, and PhDs in related fields, as well as medical students, residents, fellows, or doctors in practice. I expect that most learners will be using this book in their spare time at night and on weekends, as the medical school curriculum is already packed full, and there is no room to add skills in reproducible research to the standard curriculum. This book is designed for self-teaching, and many hints and solutions will be provided to avoid roadblocks and frustration. Many learners find themselves wanting to develop reproducible research skills after they have finished their training, and after they have become comfortable with their clinical role. This is the time when they identify and want to address problems in their practice with the data they have before them. This book is for you. 1.2 Prerequisites Thank you for giving this e-book a try. This is designed for physicians or others analyzing health data who are interested in pursuing this field using the R language. We will assume that: you have access to a computer that you have access to the internet that you can download the current version of R, and that you have downloaded a current version of Rstudio. 1.3 The Spiral of Success Structure This book is structured on the concept of a “spiral of success”, with readers learning about topics like data visualization, data wrangling, data modeling, reproducible research, and communication of results in repeated passes. These will initially be at a superficial level, and at each pass of the spiral, will provide increasing depth and complexity. This means that the chapters on data wrangling will not all be together, nor the chapters on data visualization. Our goal is to build skills gradually, and return to (and remind students of) their previously built skills in one area and to add to them. The eventual goal is for learners to be able to produce, document, and communicate reproducible research to their community. 1.4 Motivation for this Book Most medical people who learn R to do their own data analysis do it on their own time. They rarely have time for a semester-long course, and their clinical schedules usually will not allow it. Fortunately, a lot of people learn R on their own, and there is a strong and supportive R Community to help new learners. A 2019 Twitter survey conducted by @RLadies found that more than half of respondents were largely self-taught, from books and online resources. There are a lot of good resources for learning R, so why one more? In part, because the needs of a medical audience are often different. There are distinct needs for protecting health information, generating a descriptive Table One, using secure data tools like REDCap, and creating standard medical journal and meeting output in Word, Powerpoint, and poster formats. More and more, all science is becoming data science. We are able to track patients, their test results, and even the individual pixels (voxels) of their CT scans electronically, and use those data points to develop new knowledge. While one could argue that health care workers should collect data and bring it to trained statisticians, this does not work nearly as well as you might expect. Most academic statisticians are incentivized to develop new statistical methods, and are not very interested (or incentivized) to do the hand-holding required to wrangle messy clinical data into a manuscript. There also are simply not enough statisticians to meet the needs of medical science. Having clinicians on the front lines with some data science training makes a big difference, whether in 1854 in London (John Snow) or in 2014 in Flint, Michigan (Mona Hanna-Atisha). Having more clinicians with some training will impact medical care, as they will identify local problems that would have otherwise never reached a statistician, and probably never been addressed with data otherwise. 1.5 The Scientific Reproducibility Crisis Beginning as far back as 1989, with the David Baltimore case, and increasingly publicly through the 2010s, there has been a rising tide of realization that a lot of taxpayer-funded science is done sloppily, and that our standards as scientists need to be higher. The line between carelessly-done science and outright fraud is a thin one, and the case can be made that doing science in a sloppy fashion defrauds the funders, as it leads to results that can not be reproduced nor replicated. Particularly in medicine, where incorrect findings can cause great harm, we should take special care to do scientific research which is well-documented, reproducible, and replicable. This topic as a motivating force for doing careful medical research will be expanded upon in Chapter 1. 1.6 What this Book is Not 1.6.1 This Book is Not A Statistics Text This is not an introduction to statistics. I am assuming that you have learned some statistics somewhere in secondary school, undergraduate studies, graduate school, or even medical school. There are lots of statisticians with Ph.D.s who can certainly teach statistics much more effectively than I can. While I have a master’s degree in Clinical Research Design and Statistical Analysis (isn’t that a mouthful!) from the University of Michigan, I will leave formal teaching of statistics to the pros. If you need to brush up on your statistics, no worries. There are several excellent (and free!) e-books on that very topic, using R. Some good examples include (go ahead and click through the blue links to explore): Learning Statistics with R (LSR) Modern Dive Teacup Giraffes We will cover a lot of the same materials as these books, but with a less theoretical and more applied approach. I will focus on specific medical examples, and emphasize issues (like Protected Health Information) that are particularly important for medical data. I am assuming that you are here because you want to analyze your own data in your probably very limited free time. 1.6.2 This Book Does Not Provide Comprehensive Coverage of the R Universe This book is also far from comprehensive in teaching what is available in the R ecosystem. This book should be considered a launch pad. Many of the later chapters will give you a taste of what is available in certain areas, and guide you to resources (and links) that you can explore to learn more and do more beyond the scope of this book. 1.7 Some Guideposts Keep an eye out for Guideposts, which look like this: Warnings This is a common gotcha. Watch out for this. Tips This is a helpful tip for debugging. Try It Out Take what you have learned and try it yourself in the code box below. Challenge - take the next step and try a more challenging example. Try this more complicated example. Explore More - resources for learning more about a particular topic. If you want to learn more about Shiny apps, go to https://mastering-shiny.org to see an entire book on the topic. "],["getting-started-and-installing-your-tools.html", "Chapter 2 Getting Started and Installing Your Tools 2.1 Goals for this Chapter 2.2 Website links needed for this Chapter 2.3 Pathway for this Chapter 2.4 Installing R on your Computer 2.5 Installing RStudio on your Computer 2.6 Installing Git on your Computer 2.7 Getting Acquainted with the RStudio IDE", " Chapter 2 Getting Started and Installing Your Tools One of the most intimidating parts of getting started with something new is the actual getting started part. Don’t worry, we will walk you through this step-by step. 2.1 Goals for this Chapter Install R on your Computer Install RStudio on your Computer Install Git on your Computer Get Acquainted with the RStudio IDE 2.2 Website links needed for this Chapter While in many chapters, we will list the R packages you need, in this chapter, you will be downloading and installing new software, so we will list the links here for your reference https://www.r-project.org https://rstudio.com/products/rstudio/download/ https://git-scm.com/downloads 2.3 Pathway for this Chapter This Chapter is part of the TOOLS pathway. Chapters in this pathway include Getting Started and Installing Your Tools Updating R, RStudio, and Your Packages Advanced Use of the RStudio IDE When You Don’t Want to Update Packages (Using renv) Major R Updates (Where Are My Packages?) 2.4 Installing R on your Computer R is a statistical programming language, designed for non-programmers (statisticians). It is optimized to work with data in tables. It is a very fast and powerful programming engine, but it is not terribly comfortable or convenient. R itself is not terribly user-friendly. It is a lot like a drag racing car, which is basically a person with a steering wheel strapped to an airplane engine. Very aerodynamic and fast, but not comfortable for the long run (more than about 8 seconds). You will need something more like a production car, with a nice interior and a dashboard, and comfy leather seats. This equivalent of a comfy coding environment is provided by the RStudio IDE (Integrated Developer Environment). We want you to install both R and RStudio, in that order. Let’s start with installing R. R is free and available for download on the web. Go to the r-project website to get started. This screen will look like this You can see from the blue link (download R) that you can download R, but you will be downloading it faster if you pick a local CRAN mirror. You might be wondering what CRAN and CRAN Mirrors are. Nothing to do with cranberries, fortunately. CRAN is the Comprehensive R Archive Network. Each site (mirror) in the network contains an archive of all R versions and packages, and the sites are scattered over the globe. A CRAN Mirror maintains an up to date copy of all of the R versions and packages on CRAN. If you use the nearest CRAN mirror, you will generally get faster downloads. At this point, you might be wondering what a package is… A package is a set of functions and/or data that you can download to upgrade and add features to R. It is a lot like a downloadable upgrade to a Tesla that lets you play the video game Witcher 3 on your console, but more useful. Another useful analogy for packages is that they are like apps for a smartphone. When you buy your first smartphone, it only comes with the basic apps that allow it to work as a phone, but a notepad and a calculator. If you want to do cool things with your smartphone, you download apps that allow your smartphone to have new capabilities. That is what packages do for your installation of R. Now let’s get started. Click on the blue link that says “download R”. This will take you to a page to select your local CRAN Mirror , from which you will download R. Scroll down to your local country (yes, the USA is at the bottom), and a CRAN mirror near you. This is an example from the state of Michigan, in the USA. Once you click on a CRAN Mirror site to select the location, you will be taken to the actual Download site. Select the link for the operating system you want to use. We will walk through this with Windows first, then Mac. If you are using a Mac, skip forward to the Mac install directions. If you are computer-savvy enough to be using Linux, you can clearly figure it out on your own (it will look a lot like these). Once you have clicked through, your next screen will look like this: You want to download both base and Rtools (you might need Rtools later). The base link will take you to the latest version, which will look something like this. Click on this link, and you will be able to save a file named R-N.N.N-win.exe (Ns depending on version number) to your Downloads folder. Click on the Save button to save it. Now, go to your Downloads folder in Windows, and double click on the R installation file (R-N.N.N-win.exe). Click Yes to allow this to install. Now select your language option. You will be asked to accept the GNU license - do so. Click Yes to allow this to install. Then select where to install - generally use the default- a local (often C) drive - do not install on a shared network drive or in the cloud. Then select the Components - generally use the defaults, but newer computers can skip the 32 bit version. In the next dialog box, accept the default startup options. You can choose the start menu folder. The default R folder is fine. You probably won’t need shortcuts, so leave these unchecked in the next dialog box. Then the Setup Wizard will appear - click Finish, and the rest of the installation will occur. install_wizard 2.4.1 Testing Now you want to test whether your Windows installation was successful. Can you find R and make it work? Hunt for your C folder, then for OS-APPS within that folder. Keep drilling down to the Program Files folder. Then the R folder, and the current version folder within that one (R-N.N.N). Within that folder will be the bin folder, and within that will be your R-N.N.N.exe file. Double click on this to run it. The example paths below can help guide you. Opening the exe file will produce a classic 2000-era terminal window, called Rterm, with 64 bit if that is what your computer uses. The version number should match what you downloaded. The messaging should end with a “&gt;” prompt. At this prompt, type in: paste(‘Two to the seventh power is’, 2^7) (don’t leave out the comma) - then press the Enter key. This should produce the following: Note that you have explained what is being done and computed the result. 2.4.2 Mac Install of R The installation for Mac is very similar, but the windows look a bit different. At the Download Version page, you click on the Mac Download. You will then click on the link for R-N.N.N.pkg, and allow downloads from CRAN. Then go to Finder, and navigate to the Downloads folder. Click on R-N.N.N.pkg You will then click on the link for R-N.N.N.pkg, and allow downloads from CRAN. Click on Continue on 2 consecutive screens to download cont2_mac Then you need to agree with the License Agreement, then Click on Install, and provide your Mac password for permission to install. When the installation is complete, click on the Close button. Accept the prompt to move the installer file to the trash. 2.4.3 Testing R on the Mac Go to Finder, and then your Applications folder. Scroll down to the R file. Double click on this to run it. You should get this 2000-era terminal window named R Console. The version number should match what you downloaded, and the messaging should end with a “&gt;” prompt. At this prompt, type in paste(“Two to the seventh power is”, 2^7) (DON’T leave out the comma or the quotes) This should result in 2.4.4 Successful testing! Awesome. You are now Ready to R! 2.5 Installing RStudio on your Computer Now that R is working, we will install RStudio. This is an IDE (Integrated Development Environment), with lots of bells and whistles to help you do reproducible medical research. This is a lot like adding a dashboard with polished walnut panels, a large video screen map, and heated car seats with Corinthian Leather. Not absolutely necessary, but nice to have. The RStudio IDE wraps around the R engine to make your experience more comfortable and efficient. Fortunately, RStudio is a lot cheaper than any of these cars. In fact, it is free and open source. You can download it from the web at: rstudio Click on the RStudio Desktop icon to begin. This will take you to a new site, where you will select the Open Source Edition of RStudio Desktop This will take you to a new site, where you will select the Free Version of RStudio Desktop Now select the right version for your Operating syxtem - Windows or Mac. 2.5.1 Windows Install Now save the Rstudio.N.N.N.exe file (Ns will be digits representing the version number) to your downloads folder. Now go to your downloads folder, and double click on the Rstudio.N.N.N.exe file. Allow this app to make changes. Click Next to Continue, and Agree to the Install Location. Click Install to put Rstudio in the default Start Menu Folder, and when done, click the Finish button. Now select your preferred language option, accept the GNU license, Click Yes to allow this to install. Select where to install. This is generally on a local (often C:) drive, and usually not a shared network drive or in the cloud. 2.5.2 Testing Windows RStudio Now you should be ready to test your Windows installation of Rstudio. Open your Start menu Program list, and find Rstudio. Pin it as a favorite now. Click to Open Rstudio. Within the Console window of Rstudio, an instance of R is started up. Check that the version number matches the version of R that you downloaded. Now run a test at the prompt (“&gt;”) in the Console window. Type in paste(\"Three to the 5th power is\", 3^5) do not leave out the quotes or the comma Then press the enter key and this should be your result: A successful result means that you are ready to roll in Rstudio and R! 2.5.3 Installing RStudio on the Mac Start at this link: Rstudio Download Select the Free RStudio Desktop Version Then click on the big button to Download RStudio for Mac. After the Download is complete, go to Finder and the Downloads Folder. Double click on the Rstudio.N.N.N.dmg file in your Downloads folder. This will open a window that looks like this Use your mouse to drag the RStudio icon into the Applications folder. Now go back to Finder, then into the Applications folder. Double click on the RStudio icon, and click OK to Open. Pin your RStudio to the Dock. Double Click to run RStudio. RStudio will open an instance of R inside the Console pane of RStudio with the version number of R that you installed, and a “&gt;” prompt. 2.5.4 Testing the Mac Installation of RStudio Type in paste(\"Three to the 5th power is\", 3^5) do not leave out the quotes or the comma Then press the enter key and this should be your result. A successful result means that you are ready to roll in Rstudio and R! 2.6 Installing Git on your Computer 2.7 Getting Acquainted with the RStudio IDE "],["a-tasting-menu-of-r.html", "Chapter 3 A Tasting Menu of R 3.1 Setting the Table 3.2 Goals for this Chapter 3.3 Packages needed for this Chapter 3.4 Website links needed for this Chapter 3.5 Pathway for this Chapter 3.6 Open a New Rmarkdown document 3.7 Read in Data from a file 3.8 Wrangle Your Data 3.9 Visualize Your Data 3.10 Publish your work to RPubs 3.11 The Dessert Cart", " Chapter 3 A Tasting Menu of R In this chapter, we will introduce you to a lot of neat things that you can do with R and RStudio, and you will publish a simple data analysis on the Internet that you can share with friends and family. 3.1 Setting the Table At the end of this chapter, you will publish a data analysis to RPubs, a free website site where you can share your data analyses and visualizations. First you will need to set up an account on RPubs. Start by opening a new tab in your browser, and navigating to this RPubs link. It should look like the image below. Enter your name, email, username and password, and click on the Register Now button, and you will be set up to use RPubs. This will bring you to this page. In the image below, we have set up an account for pdr. Click on the Here’s How You Get Started link. You are now all set up and ready to go. Now you have a place on the internet to share your R creations! 3.2 Goals for this Chapter Open a New Rmarkdown document Read in Data from a file Wrangle Your Data Visualize Your Data Publish your work to RPubs Check out Interactive Plots Check out Animated Graphics Check out a Clinical Trial Dashboard Check out a Shiny App 3.3 Packages needed for this Chapter You will need to enter this line of code into your console, to make sure that the tidyverse package is installed on your computer. install.packages(\"tidyverse\") In the setup chunk of your Rmarkdown document, you will need to access the tidyverse package with one line of code: library(tidyverse) 3.4 Website links needed for this Chapter In this chapter, you will need to access the RPubs website. - https://rpubs.com/ 3.5 Pathway for this Chapter This Chapter is part of the XXX pathway. Chapters in this pathway include 3.6 Open a New Rmarkdown document Let’s get started in R. Turn on your computer, and open the RStudio application. You should see the familiar panes for the Console, Environment, and Files. You need to open up a new document to activate the Source pane. While in RStudio, click on File/New File/R Script. It should look like this. Now you will see the window below. Rename the document from “Untitled” to “Tasting”, and click the OK button. Now the file is open, and looks like the window below. Click on the save icon (like a floppy disk in the top left), and save this document as tasting.Rmd. You have created a new Rmarkdown document. An Rmarkdown document lets you mix data, code, and descriptive text. It is very helpful for presenting and explaining data and visualizations. An Rmarkdown document can be converted (Knit) to HTML for a web page, Microsoft Word, Powerpoint, PDF, and several other formats. Code chunks are in a gray color, and both start and end with 3 backticks (```). Text can be body text, or can be headers and titles. The number of hashtags before some header text defines what level the header is. You can insert links, pictures, and YouTube videos into Rmarkdown documents if it is helpful to explain your point. The first code chunk in each Rmarkdown document is named setup. The name comes after the left curly brace and the r ({r) at the beginning of the setup chunk. The letter r tells RStudio that what is coming on the next line is R code (RStudio can also use SQL, C++, python, and several other languages). After the comma, you can define options for this code chunk. In this case, the option include is set to FALSE, so that when this Rmarkdown document is knitted, this code chunk will not appear. 3.7 Read in Data from a file 3.8 Wrangle Your Data 3.9 Visualize Your Data 3.10 Publish your work to RPubs 3.11 The Dessert Cart Below are some examples of neat things you can do with medical data in R. These are more advanced approaches, but completely doable when you have more experience with R. 3.11.1 Interactive Plots 3.11.2 Animated Graphics 3.11.3 A Clinical Trial Dashboard 3.11.4 A Shiny App 3.11.5 An Example of Synergy in the R Community One of the remarkable things about the open source R community is that people build all kinds of new R functions and packages that are useful to them, and then share them publicly with tools like Github so that they can be useful to others. Often combining bits of several packages leads to emergent properties - completely new creations that can only occur because all of the parts (packages) are present. The collaborative nature of the R community, in this case on Twitter (follow the #rstats hashtag), can lead to surprising collaborations and outcomes. Go ahead and play the example below, which uses rayrendering (all coded entirely in R) to show a 3D map of John Snow’s cholera case data in 1854, which led him to identify the Broad Street water pump as the source of the cholera outbreak, and led to the removal of the pump handle and the end of outbreak. ## Warning in knitr::write_bib(&quot;rayrender&quot;, &quot;packages.bib&quot;): ## package(s) rayrender not found "],["interpreting-error-messages.html", "Chapter 4 Interpreting Error Messages 4.1 The Common Errors Table 4.2 Examples of Common Errors and How to fix them 4.3 Package (and Dependency) Problems 4.4 Debugging Strategies 4.5 Restart R Session 4.6 References:", " Chapter 4 Interpreting Error Messages Especially when you are starting out, it can be very difficult to interpret error messages, because these can be quite jargon-y. Let’s start with a table of the most common error messages, and the likely cause in each case. Note that when reading an error message, there are two parts - the part before the colon, which identifies in which function the error occurred, and the part after the colon, which names the error. A typical error message is something like: Error in as_flextable(.) : object 'errors' not found On the left, you are being told that the error occurred when the as_flextable() function was called. This can be helpful if you have run a long pipeline of functions, as it helps you isolate the problem. On the right, you are being told what the error was. In this case, the function looked for the object errors in the working environment (see your Environment tab at the top right in RStudio), and could not find it. Then we will walk through examples of how to create each error, and how to fix them, one by one. 4.1 The Common Errors Table Examine the error message from R, particularly the part that comes after the colon (:). The error messages listed in the left column will be what appears after the colon (:) .cl-8b108708{border-collapse:collapse;}.cl-8b053786{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-8b055f04{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:3pt;padding-top:3pt;padding-left:3pt;padding-right:3pt;line-height: 1;background-color:transparent;}.cl-8b05bc60{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8b05bc7e{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8b05bc92{width:54pt;background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(0, 0, 0, 1.00);border-top: 2pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} error_messagewhat_it_meanscould not find functionThis usually means that you made a typo in the function name (including Capitalization), or that the package you are intending to use (which contains the function) is not installed (with `install.packages('package_name')`) or loaded (with `library(package)`)object 'object-name' not foundThis usually means that the function looked for an object (like a data frame or a vector) in your working environment (check your Environment pane) and could not find it. This commonly happens when you (1) mistype the name of the object (double-check this, easy to fix), or (2) you did not actually create or save this object to your working environment - confirm by checking your Environment tab at the top right in RStudio.filename does not exist in current working directory ('path/to/working/directory')This usually means one of three things: (1) you mistyped the name of the file, or part of the path, (2) you are not in the directory where the file is, or (3) the file you thought you had saved does not exist (check your Files tab in the lower right pane in RStudio).error in ifThis usually means that you have an *if* statement that is trying to make a branch-point decision, but the logical statement that you wrote is not providing either a TRUE or a FALSE value. The most common reasons are typos in the logical statement, or an NA in one of the underlying values, which yields an NA from the logical statement. You may need to use a `na.rm = TRUE` option in your logical statement. 4.2 Examples of Common Errors and How to fix them It turns out that I forgot to run the code chunk to generate the errors object. And I confirmed this, as the errors object was not in my Environment. So it turned out to be an easy fix 4.3 Package (and Dependency) Problems 4.4 Debugging Strategies 4.4.1 Add-One-Line 4.4.2 Tidylog 4.4.3 Ask the Internet see chapter on Getting Help 4.4.4 Google strategies tags: - R, or in R - community.rstudio.com - stackoverflow error message in R how to do X in R 4.5 Restart R Session Shift-Cmd-F10 It is possible that you have created something odd in your working Environment that is messing up your code. Completely restart R your R session, make sure the Environment is clean, then run your code from start to finish to give it a new try 4.6 References: https://bookdown.org/yih_huynh/Guide-to-R-Book/trouble.html https://medium.com/analytics-vidhya/common-errors-in-r-and-debugging-techniques-f11af3f1c7d3 https://rpubs.com/Altruimetavasi/Troubleshooting-in-R https://github.com/noamross/zero-dependency-problems/blob/master/misc/stack-overflow-common-r-errors.md https://www.r-bloggers.com/2016/06/common-r-programming-errors-faced-by-beginners/ https://www.r-bloggers.com/2015/03/the-most-common-r-error-messages/ https://rpubs.com/Altruimetavasi/Troubleshooting-in-R "],["updating-r-rstudio-and-your-packages.html", "Chapter 5 Updating R, RStudio, and Your Packages", " Chapter 5 Updating R, RStudio, and Your Packages This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. "],["major-r-updates-where-are-my-packages.html", "Chapter 6 Major R Updates (Where Are My Packages?)", " Chapter 6 Major R Updates (Where Are My Packages?) This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. "],["checking-validating-and-asserting-things-about-your-data.html", "Chapter 7 Checking, Validating, And Asserting things about your Data 7.1 Why Spend Time Validating Your Data?", " Chapter 7 Checking, Validating, And Asserting things about your Data So you have imported your data! Great! Now to start the analysis! Not so fast, cowboy! First you need to validate your data. 7.1 Why Spend Time Validating Your Data? It is much more exciting to make plots, to make interactive Shiny apps of your models to share on the web, and to knit your Markdown documents to Word or PDF. But it turns out that most of the truly heinous, embarrassing errors in medical data analysis occur during the process of data wrangling. Imagine being the star of some of these sordid tales. After publishing a paper in JAMA in 2019, the authors share their SAS code on Github, and an interested critic noticed that they listed data for 73,000 kidney transplants in the US in one year. But someone familiar with the UNOS data knew that there are about 280,000 kidney transplants per year. During a merge step between two databases, SAS silently over-wrote much of the original data. This discovery led to a retraction of the paper and re-analysis, demonstraing a much smaller effect size. (Gander JC, Zhang X, Ross K, et al. Association between dialysis facility ownership and access to kidney transplantation. Retracted and replaced April 21, 2020. JAMA. 2019;322(10):957-973.) Twitter thread link here https://twitter.com/eric_weinhandl/status/1253127109830156289?s=20 After publishing a report of a randomized controlled trial in COPD in JAMA in 2018 (Aboumatar H, Naquibiddin M, Chung S, et al. Effect of a Program Combining Transitional Care and Long-term Self-management Support on Outcomes of Hospitalized Patients With Chronic Obstructive Pulmonary Disease. A Randomized Clinical Trial. Retracted and replaced Nov 12, 2018. JAMA. 2018;320(22):2335-2343.), the authors realized that they had miscoded the treatment arms. For their logistic regression analysis, they had to recode the treatment arms from 1 and 2 to 0 and 1. Unfortunately, they flipped the values, and interpreted their results as beneficial. When they realized that the mis-coding changed the result from beneficial to harmful, they reported it to the journal and retracted the paper. After publishing a report on Best Practices for In-Hospital Cardiac Arrest in JAMA Cardiology, the authors found coding errors in their data. 9 hospitals of 130 had been misclassified, changing some of their associations. (https://jamanetwork.com/journals/jama/article-abstract/2764714) A med student analyzing a dataset for the first time uses boolean statements to categorize values. But she does not realize that this Stata dataset used “99” for missing values. 7.1.0.1 Cleaning – names with janitor package to snake_case 7.1.0.1.1 A few words about tidyverse style 7.1.0.2 Finding Missing data – naniar and visdat packages 7.1.0.3 Validating data – validate package 7.1.1 Asserting properties of your data with assertr 7.1.1.1 Evaluating – str, glimpse 7.1.1.2 Exploring- skimr package 7.1.1.3 Histograms 7.1.1.4 Correlations – ggally extension of ggplot2, and corrr package "],["time-series-data-with-the-tidyverts-packages.html", "Chapter 8 Time Series data with the Tidyverts Packages 8.1 Tsibble 8.2 Fable 8.3 Feasts 8.4 Slider", " Chapter 8 Time Series data with the Tidyverts Packages Fun text here. All kinds of crazy examples. Time series with data from influenza pandemic of 1918-19, perhaps. This is a book for anyone in the medical field interested in analyzing the data available to them to better understand health, disease, or delivery of care. This could include nurses, dieticians, psychologists, and PhDs in related fields, as well as medical students, residents, fellows, or doctors in practice. I expect that most learners will be using this book in their spare time at night and on weekends, as the medical school curriculum is already packed full, and there is no room to add skills in reproducible research to the standard curriculum. This book is designed for self-teaching, and many hints and solutions will be provided to avoid roadblocks and frustration. 8.1 Tsibble Time series tibble Tidyverts webpage 8.2 Fable Tidy forecasting 8.3 Feasts Feature extraction and Statistics 8.4 Slider Rolling anaylsis with window functions. Slider packagedown page "],["descriptive-data-tables.html", "Chapter 9 Descriptive Data Tables 9.1 Making Table One 9.2 Making An Adverse Events Table 9.3 Making A Results Table", " Chapter 9 Descriptive Data Tables In this chapter, we will focus on making the descriptive table of the participants in your study, often colloquially know as “Table One”, based on its usual placement in a medical manuscript. Before we plunge in, I would like to make one point of warning. It is quite common in a multiple-arm randomized controlled trial to compare the distribution of particular baseline characteristics of the subjects between arms with a p value, usually in a column at the far right. This is silly, as this produces a whole column of p values, corresponding to the multiple comparisons performed. With 20 comparisons, by chance, you are likely to get one or more “significant” p values. These are not helpful or meaningful, and are considered bad statistical practice. Let me quote the CONSORT guidelines on the publications of clinical trials. “Unfortunately significance tests of baseline differences are still common; they were reported in half of 50 RCTs published in leading general journals in 1997. Such significance tests assess the probability that observed baseline differences could have occurred by chance; however, we already know that any differences are caused by chance. Tests of baseline differences are not necessarily wrong, just illogical. Such hypothesis testing is superfluous and can mislead investigators and their readers. Rather, comparisons at baseline should be based on consideration of the prognostic strength of the variables measured and the size &gt;of any chance imbalances that have occurred.” CONSORT STATEMENT Despite this, some journals and editors still ask for these p values. Please resist, and quote the CONSORT statement. If you must do this, please do it only under duress. 9.1 Making Table One 9.1.1 The tableby function in the arsenal package 9.1.2 The gtsummary package with flextable This is a newer approach which offers many of the same features as tableby. The gtsummary package is a companion to/built upon the gt package, (“gt” for grammar of tables), which is supported by RStudio. The gtsummary package, like gt, is designed to produce nice html output with lots of nice formatting. However, as a nice bonus, gtsummary includes a neat function as_flextable, which converts your resulting table into a flextable, which can be knit to a Microsoft Word Document or a Powerpoint presentation with Rmarkdown. This means that you can make a table once, and be able to produce output in HTML for webpages, Microsoft Word for manuscripts, and MS Powerpoint for presentations from the same file without any conversion issues. The only question is how and when you prefer to format your table. Both gt and flextable have great options for formatting your tables. You can do this in gt, then do as_flextable, or you can convert to a flextable first, then do your formatting. You can choose based on your comfort and familiarity with flextable vs. gt. Both have excellent explanatory websites, with flextable here and gtsummary here. 9.1.3 Example of how to build a Table 1 with gtsummary In the window below, you can: Expand the example below to View in full screen by clicking the four arrows icon (Esc to return to small version). Go to the next slide or previous slide with the left and right arrow icons/keys (or hover your mouse over the window and slowly scroll up and down.) Share on the internet by clicking the Share icon (3 circles connected by 2 lines). Give it a try. 9.2 Making An Adverse Events Table 9.3 Making A Results Table "],["comparing-two-measures-of-centrality.html", "Chapter 10 Comparing Two Measures of Centrality 10.1 Common Problem 10.2 One Sample T test 10.3 Insert flipbook for ttest here 10.4 Fine, but what about 2 groups? 10.5 3 Assumptions of Student’s t test 10.6 Getting results out of t.test 10.7 Reporting the results from t.test using inline code", " Chapter 10 Comparing Two Measures of Centrality A common question in medical research is whether one group had a better outcome than another group. These outcomes can be measured with dichotomous outcomes like death or hospitalization, but continuous outcomes like systolic blood pressure, endoscopic score, or ejection fraction are more commonly available, and provide more statistical power, and usually require a smaller sample size. There is a tendency in clinical research to focus on dichotomous outcomes, even to the point of converting continuous measures to dichotomous ones (aka “dichotomania”, see Frank Harrell comments here), for fear of detecting and acting upon a small change in a continuous outcome that is not clinically meaningful. While this can be a concern, especially in very large, over-powered studies, it can be addressed by aiming for a continuous difference that is at least as large as one that many clinicians agree (a priori) is clinically important (the MCID, or Minimum Clinically Important Difference). The most common comparison of two groups with a continuous outcome is to look at the means or medians, and determine whether the available evidence suggests that these are equal (the null hypothesis). This can be done for means with Student’s t-test. Let’s start by looking at the cytomegalovirus data set. This includes data on 64 patients who received bone marrow stem cell transplant, and looks at their time to activation of CMV (cytomegalovirus). In the code chunk below, we group the data by donor cmv status (donor.cmv), and look at the mean time to CMV activation (time.to.cmv variable). Run the code (using the green arrow at the top right of the code chunk below) to see the difference in time to CMV activation in months between groups. Try out some other grouping variables in the group_by statement, in place of donor.cmv. Consider variables like race, sex, and recipient.cmv. Edit the code and run it again with the green arrow at the top right. # insert libraries in each chunk as if independent library(tidyverse) library(medicaldata) cytomegalovirus %&gt;% group_by(sex) %&gt;% summarize(mean_time2cmv = mean(time.to.cmv)) -&gt; summ summ ## # A tibble: 2 x 2 ## sex mean_time2cmv ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0 13.7 ## 2 1 12.7 That seems like a big difference for donor.cmv, between 13.7303333 months and 12.7441176 months. And it makes theoretical sense that having a CMV positive donor is more likely to be associated with early activation of CMV in the recipient. But is it a significant difference, one that would be very unlikely to happen by chance? That depends on things like the number of people in each group, and the standard deviation in each group. That is the kind of question you can answer with a t-test, or for particularly skewed data like hospital length of stay or medical charges, a Wilcoxon test. 10.1 Common Problem Comparing two groups Mean or median vs. expected Two arms of study - independent Pre and post / spouse and partner / left vs right arm – paired groups Are the means significantly different? Or the medians (if not normally distributed)? 10.1.1 How Skewed is Too Skewed? Formal test of normality = Shapiro-Wilk test Use base data set called ToothGrowth library(tidyverse) library(medicaldata) data &lt;- cytomegalovirus head(data) ## ID age sex race diagnosis ## 1 1 61 1 0 acute myeloid leukemia ## 2 2 62 1 1 non-Hodgkin lymphoma ## 3 3 63 0 1 non-Hodgkin lymphoma ## 4 4 33 0 1 Hodgkin lymphoma ## 5 5 54 0 1 acute lymphoblastic leukemia ## 6 6 55 1 1 myelofibrosis ## diagnosis.type time.to.transplant prior.radiation ## 1 1 5.16 0 ## 2 0 79.05 1 ## 3 0 35.58 0 ## 4 0 33.02 1 ## 5 0 11.40 0 ## 6 1 2.43 0 ## prior.chemo prior.transplant recipient.cmv donor.cmv ## 1 2 0 1 0 ## 2 3 0 0 0 ## 3 4 0 1 1 ## 4 4 0 1 0 ## 5 5 0 1 1 ## 6 0 0 1 1 ## donor.sex TNC.dose CD34.dose CD3.dose CD8.dose TBI.dose ## 1 0 18.31 2.29 3.21 0.95 200 ## 2 1 4.26 2.04 NA NA 200 ## 3 0 8.09 6.97 2.19 0.59 200 ## 4 1 21.02 6.09 4.87 2.32 200 ## 5 0 14.70 2.36 6.55 2.40 400 ## 6 1 4.29 6.91 2.53 0.86 200 ## C1/C2 aKIRs cmv time.to.cmv agvhd time.to.agvhd cgvhd ## 1 0 1 1 3.91 1 3.55 0 ## 2 1 5 0 65.12 0 65.12 0 ## 3 0 3 0 3.75 0 3.75 0 ## 4 0 2 0 48.49 1 28.55 1 ## 5 0 6 0 4.37 1 2.79 0 ## 6 0 2 1 4.53 1 3.88 0 ## time.to.cgvhd ## 1 6.28 ## 2 65.12 ## 3 3.75 ## 4 10.45 ## 5 4.37 ## 6 6.87 10.1.2 Visualize the Distribution of data variables in ggplot Use geom_histogram or geom_density (pick one or the other) look at the distribution of CD3.dose or time.to.cmv Bonus points: facet by sex or race or donor.cmv Your turn to try it library(tidyverse) library(medicaldata) data %&gt;% ggplot(mapping = aes(time.to.cmv)) + geom_density() + facet_wrap(~sex) + theme_linedraw() library(tidyverse) library(medicaldata) data %&gt;% ggplot(mapping = aes(time.to.cmv)) + geom_histogram() + facet_wrap(~race) 10.1.3 Visualize the Distribution of data$len in ggplot The OJ group is left skewed May be problematic for using means formally test with Shapiro-Wilk library(tidyverse) library(medicaldata) data$time.to.cmv %&gt;% shapiro.test() ## ## Shapiro-Wilk normality test ## ## data: . ## W = 0.68261, p-value = 0.0000000001762 10.1.4 Results of Shapiro-Wilk p-value = 0.1091 p not &lt; 0.05 Acceptably close to normal OK to compare means rather than medians can use t test rather than wilcoxon test if p is &lt; 0.05, use wilcoxon test also known as Mann-Whitney test a rank-based (non-parametric) test 10.1.5 Try it yourself use df &lt;- msleep library(tidyverse) library(medicaldata) df &lt;- msleep head(df$sleep_total) ## [1] 12.1 17.0 14.4 14.9 4.0 14.4 test the normality of total sleep hours in mammals 10.1.6 Mammal sleep hours library(tidyverse) library(medicaldata) shapiro.test(df$sleep_total) ## ## Shapiro-Wilk normality test ## ## data: df$sleep_total ## W = 0.97973, p-value = 0.2143 meets criteria - acceptable to consider normally distributed now consider - is the mean roughly 8 hours of sleep per day? 10.2 One Sample T test univariate test Ho: mean is 8 hours Ha: mean is not 8 hours can use t test because shapiro.test is NS 10.2.1 How to do One Sample T test library(tidyverse) library(medicaldata) t.test(df$sleep_total, alternative = &quot;two.sided&quot;, mu = 8) Try it out, see if you can interpret results 10.2.2 Interpreting the One Sample T test ## ## One Sample t-test ## ## data: df$sleep_total ## t = 4.9822, df = 82, p-value = 0.000003437 ## alternative hypothesis: true mean is not equal to 8 ## 95 percent confidence interval: ## 9.461972 11.405497 ## sample estimates: ## mean of x ## 10.43373 p is highly significant can reject the null, accept alternative sample mean 10.43, CI 9.46-11.41 10.2.3 What are the arguments of the t.test function? x = vector of continuous numerical data y= NULL - optional 2nd vector of continuous numerical data alternative = c(“two.sided”, “less”, “greater”), mu = 0 paired = FALSE var.equal = FALSE conf.level = 0.95 documentation 10.3 Insert flipbook for ttest here Below is a flipbook. It illustrates a bit of how to do a t-test. click on it and you can use the arrow keys to proceed forward and back through the slides, as you add lines of code and more results occur. Let’s start with a flipbook slide show. When the title slide appears, you can step through each line of the code to see what it does. The right/left and/or up/down arrows will let you move forward and backward in the code. You can use the arrow keys to go through it one step at a time (forward or backward, depending on which arrow key you use), to see what each line of code actually does. Give it a try below. See if you can figure out what each line of code is doing. 10.3.1 Flipbook Time! This is t-testing in action. 10.4 Fine, but what about 2 groups? consider df$vore library(tidyverse) library(medicaldata) prostate &lt;- medicaldata::blood_storage tabyl(prostate$AA) ## prostate$AA n percent ## 0 261 0.8259494 ## 1 55 0.1740506 hypothesis - herbivores need more time to get food, sleep less than carnivores how to test this? normal, so can use t test for 2 groups 10.4.1 Setting up 2 group t test formula interface: outcome ~ groupvar library(tidyverse) library(medicaldata) df %&gt;% filter(vore %in% c(&quot;herbi&quot;, &quot;carni&quot;)) %&gt;% t.test(formula = sleep_total ~ vore, data = .) Try it yourself What do the results mean? 10.4.2 Results of the 2 group t test ## ## Welch Two Sample t-test ## ## data: sleep_total by vore ## t = 0.63232, df = 39.31, p-value = 0.5308 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -1.911365 3.650509 ## sample estimates: ## mean in group carni mean in group herbi ## 10.378947 9.509375 10.4.3 Interpreting the 2 group t test Welch t-test (not Student) Welch does NOT assume equal variances in each group p value NS accept null hypothesis Ho: means of groups roughly equal Ha: means are different 95% CI crosses 0 Carnivores sleep a little more, but not a lot 10.4.4 2 group t test with wide data You want to compare column A with column B (data are not tidy) Do mammals spend more time awake than asleep? library(tidyverse) library(medicaldata) t.test(x = df$sleep_total, y = df$awake, data = msleep) 10.4.5 Results of 2 group t test with wide data library(tidyverse) library(medicaldata) t.test(x = df$sleep_total, y = df$awake, data = msleep) ## ## Welch Two Sample t-test ## ## data: df$sleep_total and df$awake ## t = -4.5353, df = 164, p-value = 0.00001106 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -4.498066 -1.769404 ## sample estimates: ## mean of x mean of y ## 10.43373 13.56747 10.5 3 Assumptions of Student’s t test Sample is normally distributed (test with Shapiro) Variances are homogeneous (homoskedasticity) (test with Levene) Observations are independent not paired like left vs. right colon not paired like spouse and partner not paired like measurements pre and post Rx 10.5.1 Testing Assumptions of Student’s t test Normality - test with Shapiro If not normal, Wilcoxon &gt; t test Equal Variances - test with Levene If not equal, Welch t &gt; Student’s t Observations are independent Think about data collection are some observations correlated with some others? If correlated, use paired t test 10.6 Getting results out of t.test Use the tidy function from the broom package Do carnivores have bigger brains than insectivores? library(tidyverse) library(medicaldata) library(broom) df %&gt;% filter(vore %in% c(&quot;carni&quot;, &quot;insecti&quot;)) %&gt;% t.test(formula = brainwt ~ vore, data = .) %&gt;% tidy() -&gt; result result 10.6.1 Getting results out of t.test ## # A tibble: 1 x 10 ## estimate estimate1 estimate2 statistic p.value parameter ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0577 0.0793 0.0216 1.20 0.253 12 ## # … with 4 more variables: conf.low &lt;dbl&gt;, conf.high &lt;dbl&gt;, ## # method &lt;chr&gt;, alternative &lt;chr&gt; 10.7 Reporting the results from t.test using inline code use backticks before and after, start with r i.e. My result is [backtick]r code here[backtick]. The mean brain weight for carnivores was 0.0792556 The mean brain weight for herbivores was 0.02155 The difference was 0.0577056 The t statistic for this Two Sample t-test was 1.1995501 The p value was 0.2534631 The confidence interval was from -0.05 to 0.16 10.7.1 For Next Time Skewness and Kurtosis Review Normality When to use Wilcoxon Levene test for equal variances When to use Welch t vs. Student’s t Paired t and Wilcoxon tests "],["running-r-from-the-unix-command-line.html", "Chapter 11 Running R from the UNIX Command Line 11.1 What is the UNIX Command line? 11.2 Why run R from the command line? 11.3 How do you get started? 11.4 The Yawning Blackness of the Terminal Window 11.5 Where Are We? 11.6 Cleaning Up 11.7 Other helpful file commands 11.8 What about R? 11.9 What about just a few lines of R? 11.10 Running an R Script from the Terminal 11.11 Rendering an Rmarkdown file from the Terminal", " Chapter 11 Running R from the UNIX Command Line 11.1 What is the UNIX Command line? The command line is a simple Terminal window with a prompt at which you can type commands, And do primitive but powerful things to your files. The UNIX computing environment was developed in the 1960s, and is still beloved and fetishized by brogrammers, who believe you are not truly a programmmer if you can’t code from the command line. This is silly. The major attraction to UNIX in the 1960s is that it was much better than punch cards. Which isn’t saying much. We have had 60 years of software advancement and user interface improvements, so we really should not have to put up with the inherent user hostility of the UNIX environment. UNIX is an early operating system, which is built around a ‘kernel’ which executes operating system commands, and a ‘shell’ which interprets your commands and sends them to the kernel for execution. The most common shell these days is named ‘bash’, which is a silly recursive brogrammer joke. You will sometimes see references to shell scripts or shell or bash programming. These are the same thing as command line programming. UNIX is a common under-the-hood language across many computers today, as the Apple iOS is built on top of UNIX, and the various versions of the LinuxOS are built on a UNIX-like kernel, with a similar command shell. The command line is often the least common denominator between different pieces of open-source software that were not designed to work together. It can occasionally be helpful to build a data pipeline from mismatched parts. However, there is a lot of low-quality user-hostile command line work involved to get it done, often referred to as “command-line bullshittery”. This is a common bottleneck that slows scientific productivity, and there is a vigorous discussion of it on the interwebs here and here (counterpoint). Essentially, some argue that it is largely a waste of time and effort, while others see it as a valuable learning experience, like doing least squares regression by hand with a pencil. Running R from the command line is a bit like spending a day tuning your car’s engine by yourself. There is a case to be made that this will improve the efficiency and performance of your car, but it is also usually more efficient to pay someone else to do it, unless you are a car expert with a lot of free time. 11.2 Why run R from the command line? You can run R from the command line. It has none of the bells and whistles, nor any of the user conveniences of the RStudio Interactive Developer Environment (IDE). But it is how R was originally expected to be used when it was developed back in 2000 in New Zealand. Running R from the command line allows you to do powerful things, like process multiple files at once, which can be handy when you have multiple files of sequencing data from distinct observations, or you have a multistep data wrangling pipeline with several slow steps. For many years, this was the only way to easily apply code across multiple files to build a complex data pipeline. This is much less true today, with tools to handle file paths like the {here} and {fs} packages, run Python scripts from R with the {reticulate} package, run C++ scripts with Rcpp, and run bash, python, SQL, D3, and Stan scripts from Rmarkdown. You can use the {drake} package to manage multi-step data pipelines in different languages (similar to make). But some labs have been doing things at the command line for years, and find it hard to change. 11.3 How do you get started? First, you need to open a terminal window. And to do that, you need to find it. This is akin to getting under the hood of a car, and computer makers don’t exactly encourage it. 11.3.1 On a Mac Go to Finder/Applications/Utilities/Terminal 11.3.2 On a Windows PC Go to Applications/Terminal 11.4 The Yawning Blackness of the Terminal Window So, you have managed to open a terminal window, which has a standard UNIX prompt, ending in something like % or $. Not terribly helpful, is it? The bash shell is waiting for you to enter a command. No user interface for you! Let’s start with a simple one, which can’t do any harm. Run the command below: whoami whoami ## peterhiggins Remember that UNIX started out as an operating system for terminals, and knowing who was logged in was a helpful thing. You can string together two commands with a semicolon between them. Try the following: whoami;date ## peterhiggins ## Sat Dec 12 18:06:05 EST 2020 OK, fine. This is sort of helpful. It was really important when you were on a terminal and paying by the minute for time on a mainframe back in 1969. And, on occasion, if you will need to use an entire computer cluster to run a script (or scripts) on a lot of data, you will likely have to use some of this command line knowledge. You can even schedule jobs (scripts) to run when your time is scheduled on the cluster with cron and crontab. At this point, it would be helpful to open a window with your Documents folder, and keep it side by side with the window in which you are reading this e-book. We will start working with files and directories, and it is helpful to see changes in your file/folder structure in real time. As we run commands in the bash shell, check them against what you see in the folder window. You may find that some files (dotfiles, starting with a period) are hidden from the user to prevent problems that occur when these are deleted. 11.5 Where Are We? OK, let’s start looking at files and directories. Start with the pwd command, which does not stand for password, but for print working directory. Run the code below in your Terminal window. pwd ## /Users/peterhiggins/Documents/RCode/rmrwr-book You can see the full path to your current directory. This can be a bit obscure if you are just looking at your folder structure, particularly at the beginning of the path. Fortunately, the {here} package handles a lot of this for you when you are working in Rstudio projects. We think of the directory as a tree, with a root - in this case, Users, and various branches as you build out folders and subfolders. We can move up and down the folders of the directory paths with the cd command, for change directory. Try this command in your Terminal Window, and see if you can figure out what it does. cd .. It changes the directory up one level closer to the root directory. It is straightforward to go up the directory tree, as each folder only has one parent. But it is tricky to go down the directory tree, as there are many possible branches/children, and you do not inherently know the names of these branches. We need to list the contents of your current directory with ls to know what is there. Try the ls command in your Terminal window cd /Users/peterhiggins/Documents/; ls ## 1FQ_Crohn&#39;s Disease_23Oct2020 (002).doc ## 2020-Jun-05 AGA IMIBD meeting notest.docx ## 2021 AGA Invited Speaker Session Basic Hybrid Example.pdf ## 2021.Higgins AGA Distinguished Clinician.CO.docx ## A is for Allspice.2.0.docx ## A is for Allspice.docx ## ABT263_HIO_report_toWord.docx ## AGA IMIBD ## AGA IMIBD Councilor Career Discussion Guide.docx ## AGA IMIBD Webinar Outline.docx ## AIBD CAM Higgins.pdf ## AIBD CAM Higgins.pptx ## AIBD SoMe Higgins.pdf ## AIBD SoMe Higgins.pptx ## AIBD agreement.docx ## AIBD20Template.pptx ## AMAG DDW Clear draft_PDRH comments.docx ## APG1244_Milestone_report.docx ## ASUC_UC_protocol_comments_2020.docx ## A_Woodward_Score Sheet_PDRH.docx ## Accounts and Access (1) (1).docx ## Advice for participants in webinars.docx ## Animation of NSAID.pptx ## BKochar_Frailty.pdf ## BM recommendation.docx ## Beginners_GuideToR.pdf ## Biosketch for K.pptx ## Biosketch_2020_Higgins_ClinResIBD_biosketch.doc ## Brazil.ItineraryNov2015.docx ## Butter BCS Chicken.docx ## CAS.K.candidate.background_SB_PDRH.docx ## CAS.T32.Project.Description-JS.docx ## CAS.career.goals.obj.development.training_PDRH.docx ## CC360_The Risk of SARS.R1.docx ## CC360_The Risk of SARS.docx ## CCF IBD Webcast 2020 Draft Deck_For Review.pptx ## CCFA EIC Candidate Interview Questions (candidates) jobin[1].doc ## CDC_proposal1.1.docx ## CLARE STOCKS.docx ## COVID Trials Feasibility ## CaltechCampus Tour &amp; Information Session.webarchive ## Cancel Appt Epic.ppt ## Causal.png ## CellDeath_DDW_2021_ISS.pdf ## Chu RPG Review_PDRH.docx ## Clare Investment Summary.docx ## Council Conversations Author Chat Guide.docx ## Coursera_Programming in R Notes.docx ## CoverLetterPlus.pptx ## Crash&amp;Burn_ScriptV2_100318 copy.pdf ## DataCamp Courses by Topic.docx ## DeEscalationACG2016.pptx ## Demographics.pdf ## Documents.Rproj ## DrHiggins IBD Data Request.xlsx ## Draft Postop IBD Surgery Care Protocols v2_SERedit.docx ## ECCO 2016 Amsterdam Schedule.docx ## ECCO 2019 UC PRO SS Abstract D1f_JP_UA_YO_AM_PDRH.docx ## ECCO2016Lycera30937.pptx ## Effect of medications on the recurrence of cancer in IBD patients.docx ## Electrical engineering interview questions.docx ## FDAtofaResponse.docx ## FFMI Kickstart-FinalReport 5-20-16-LJ.docx ## FITBITProtocol_28NOV2016_AbbVie.docx ## FITBITProtocol_4DEC2016_AbbVie.docx ## FMT_DDW_2021_ISS.pdf ## FibrosisIBDCedars2016.pptx ## Figures-KC-JAMA.pptx ## Finance and Retirement Plans.docx ## Financial Priorities.docx ## Garmin Notes.docx ## General Social Media Tips.docx ## General thoughts about query letters.docx ## Git for MDs_2.pptx ## GitHub ## Github for MDs_1.pptx ## Glover_RPG_Review_PDRH.docx ## GoToMeeting Chats ## GradPartyHigginsInvites.xlsx ## HPI-5016 IBD Patient Contact Info.xlsx ## HS movie.docx ## Higgins AGA Webinar Slides.pptx ## Higgins Bio.docx ## Higgins New IBD.pptx ## Higgins Refractory Proctitis.pptx ## Higgins biosketch2015KRao.doc ## Higgins biosketch2016KRao.doc ## Higgins-peter.jpg ## HigginsACGMidwest2019_PerioperativeIBD.pptx ## Higgins_LOS_IBDBiobank_Shah_Nusrat_2019.docx ## Higgins_UM_CME_Pregnancy in IBD.pptx ## How To Log in to IBD Server.docx ## How To Log in to RStudio Server for HigginsLab.docx ## How To Log in to RStudio Server for Shiny.docx ## IBD 2020 - Honorarium reimbursement Form.docx ## IBD Biobank Cryostor.pptx ## IBD Clinical Trials for MDsDearborn2017.pptx ## IBD Insurance Pilot Results.docx ## IBD Insurance Survey for CCFA Partners Existing.docx ## IBD Journal Club 13Feb2017.docx ## IBD Journal Club July 11.docx ## IBD Plexus meeting 21 Sep 2015 notes.docx ## IBD School 322 Script.docx ## IBD School 324 Script.docx ## IBD School 325 Script.docx ## IBD and biologics tweets.docx ## IBD inbox coverage.docx ## IBDInsuranceSurvey3.docx ## IBDMentoringConferenceCall4AbstractsPH.docx ## IBD_Deescalation_Apr_2019_PDRH.docx ## IBDforLansing2017.pptx ## IMG_0006.jpg ## IMG_0008.jpg ## IMG_1523st.jpg ## IMIBD Councilors 2020-21.docx ## IMIBD Partners insurance 2020DDW.pptx ## IMIBD_expanded_descriptors.xlsx ## JAK_DDW_2021_ISS.pdf ## JAMA_KC_Second JAMA.docx ## JAMA_Review_on_CD_Revisions_Tracked_Changes with edits_PDRH.docx ## JB_V1 Career Goals and Objectives 7.8.2020_PDRH.docx ## JB_V2 Candidate’s Background 7.7.2020_PDRH.docx ## JDix_Study_update.docx ## K Award Institutional Letter of Commitment.pptx ## K Candidate Section.pptx ## K105_Melmed_PROs in Practice_MB_bb_JLS.pptx ## K23 Aims - Shirley Cohen-Mekelburg 11.14.19.docx ## K23_morph_measurements_MockupManuscript_21JAN2019.docx ## Learning R discussion Jeremy Louissaint.docx ## Letter to Frank Hamilton.docx ## Lin_Reviewer Score_PDRH.docx ## Log in to IBD Server.docx ## MEI_2020_PH_W9.pdf ## MEI_ACH_Wire Transfer Form.docx ## MIM-TESRIC PROTOCOL_Higgins_14Apr2020.docx ## MIM-TESRIC PROTOCOL_Higgins_26Aug2020.docx ## Managment of CD.pptx ## Manuscript v1.docx ## Manuscript v2.PDRH.docx ## McDonald, Nancy.pdf ## Megan McLeod Rec Letter Residency.docx ## MentoringAgendaDraftPH.docx ## Meta analysis TB vs CD version 3.5.docx ## Michigan Medicine Gastroenterology Social Media Initiative.docx ## Michigan Medicine Model for COVID-19 Clinical Trial Oversight DRAFT (KSB 04.17.20)-AL-PDRH.docx ## Microsoft User Data ## MultidisciplinaryIBDClinicPHv2.docx ## NordicTrackTC9iTreadmillManual.pdf ## Oct2019payPDRH.PDF ## Odd college lists.docx ## P Singh K grant aims 8-25_PDRH.docx ## P2PEP slide 2020 ## P2PEP slide 2020.pptx ## PHcv2019.docx ## PHcv2020.docx ## PRO agenda videos VINDICO.docx ## PRO letter.docx ## PS_K grant aims 6-25_PDRH.docx ## PTM LOS From PDRH.docx ## PTM LOS From PDRH.pdf ## Pearson 5 Notes.docx ## Perils of Excel.pptx ## Personal statement version 3!.docx ## Pitch Letter - S is for Saffron.docx ## Poppy Eulogy backup.docx ## Poppy Eulogy.docx ## Possible Eastern College Tour.docx ## Powerpoint ## Prashant Rec Letter.docx ## Prashant Rec Letter.pdf ## PredictingIBD_DDW_2021_ISS.html ## PredictingIBD_DDW_2021_ISS.pdf ## Purdue Disclosure Form_Higgins.docx ## Question 16.docx ## RCode ## Ramp up clinical research_PH.xlsx ## Ramping up human subject research - MM 6-1-20 _KDA_PDRH_suggestions.docx ## Recordings ## Review Criteria for COVID Clinical Trials.docx ## Review guidelines_2017.docx ## Roasted Salted Cashews.docx ## S is for Saffron 3.0.docx ## S is for Saffron 3.1.docx ## S is for Saffron 3.2.docx ## S is for Saffron.2.0.docx ## SEAN STOCKS.docx ## SIG_Template_IBD Program_FINAL.docx ## Sean Common App academic honors list.docx ## Sean Common App activities list.docx ## Sean Higgins Bordogni.mp4 ## Sean Higgins Brag Sheet.docx ## Sean Investment Summary.docx ## Sean Resume Tabular VBorder.docx ## Sean Resume Tabular.docx ## Sean Resume.docx ## Sean Summer Priorities 2016.docx ## SecureIBD.pptx ## ShareRmd.html ## Sherman Prize Nominee Questions.docx ## Shoreline West Tour Information.docx ## Short PA slides.pptx ## Shotwave thread.docx ## Signing Clinical Research Infusion Orders.pdf ## SingleCell_DDW_2021_ISS.pdf ## SoMe_use_2020.png ## Social Media for GI.pptx ## Source Code PT1.docx ## Stelara paper.docx ## T32_current_text_14June2019.docx ## TOPPIC ML draft v5SCM_YL_AKW_PDRH.docx ## TabaCrohn IBD J club.docx ## Tables.docx ## Takeda_IBD School Videos_Submission.pdf ## Task List 2020-2.docx ## Task List 2020-5.docx ## Task List 2020.docx ## Testing signatures with Adobe.pdf ## The Risk of SARS.R1.Markup.docx ## Tidymodels.docx ## Tofa in ICI Figure Legends_Final Draft_V2.docx ## Tofa inpatient induction Protocol_02NOV2018_PHforEdits.docx ## Toffee Separation Tips.docx ## UCRx_DDW_2021_ISS.pdf ## UC_protocol_comments_2020.docx ## UM IBD Clinical Trials IBD referral form.docx ## UPA_U_ACHIEVE 1st draft_PDRH.docx ## VINDICO_PRO.pptx ## VideoVisitSchedulingQuickApptsforProviders.pdf ## VincentChen_K specific aims 2020-10-25.docx ## VirtualPtEdMar2020.v2.pdf ## WebEx ## Zoom ## Zwift ## Zwift-Gift-Card.pdf ## aga institute council july 2020 meeting.pdf ## algorithms_thiopurine.pdf ## base-r-cheatsheet.pdf ## biomakers_fibrosisPDRH.docx ## bmj_imputation.pdf ## cgh_factors_utilization.pdf ## draft_tokenization letter Risa_Uste.docx ## early-career-faculty_Dec-2020.xlsx ## epic cancel_reschedule appointments.ppt ## epic schedule viewing_close.ppt ## escalator.html ## fellow graduation 2020.docx ## hexStickers.jpg ## higgins2x3.jpg ## iBike Rides ## learnr app diagram.jpg ## learnr app diagram.pptx ## letter Lowrimore.docx ## mockstudy manuscript draft.docx ## nejm1966_beecher_ethics.pdf ## nejm_indomethacin.pdf ## nejm_statins.pdf ## pdrh_IBD_email.xlsx ## personal statement fellowship_PDRH.docx ## peterhiggins.jpg ## seq-6.pdf ## signature.docx ## signature.fld ## signature.html ## signature.pdf ## signature.png ## stiff_bcl.R ## submitJanssen_IBD School Videos_12Jul2018.pdf ## tidyr_pivot.png ## tidyr_pivot.xcf ## ucla1.jpg ## untidy_sheets.pptx ## wga_min20.pdf ## ~$T Review Higgins.docx ## ~$sk List 2020-5.docx ## ~$sk List 2020.docx You will see a listing of all files and folders in the current directory. You can get more details by adding the option (sometimes called a flag) -l cd /Users/peterhiggins/Documents/; ls -l The full listing will give you more details, including read &amp; write permissions, file size, date last saved, etc. Many commands have options, or flags, that modify what they do. Find a folder inside of your Documents folder. We will now go down a level in the directory tree. In my case, I will use the Powerpoint folder. In your Terminal window: change the directory to the Powerpoint directory list the contents of this folder cd /Users/peterhiggins/Documents/Powerpoint; ls ## 2016IBDClinTrialsforMDsDearborn.pptx ## 2016IntegratedDeckorMDsGB.pptx ## 2019 SCSG GI Symposium IBD SoA - Read-Only.pptx ## BE LGD Dearborn 2016.04.12.pptx ## Getting Started in RStudio.pptx ## Higgins Microbiota for IBD Patient Ed.pptx ## HigginsDec2018AJG_SmokingStatus.pptx ## IBDUpdate.pptx ## Integrated Slide Deck Dearborn 2016.04.12.pptx ## MER Stress Management Dearborn 4-14.pptx ## MichiganMedicine-IBDTemplate.potx ## PDRH RCAR 2020.pptx ## PennThioMTX2017Higgins.pptx ## Pregnancy in IBD.pptx ## Regenbogen CRS for GI CME Course2016.pptx ## Senior Slide Show.pptx ## ThomsonRectalStumpComplicationsIBD2_13.pptx ## UEGweek2020.pptx ## UMHS Talk- Moving Beyond AntiTNF 4-2016 FINAL v2.pptx ## Vertebrate Animals for K.pptx ## VirtualPtEdMar2020.v2.pptx ## Writers Room.pptx ## ibd_meds_surgery_metan.pptx Great! You moved to a new directory and listed it. Now we will get fancy, and make a new directory within this directory with the mkdir command. Try this in your Terminal window: pwd; mkdir new_files; ls You have now made a new directory (folder) within the previous directory, named new_files. Verify this in your Documents folder. You can now change to this directory and list the contents (it should be empty). Try this out in your Terminal Window (note edit the cd command to your own directory path). cd /Users/peterhiggins/Documents/Powerpoint/new_files; ls Note that you can abbreviate the current directory with ., so that you could have also used cd ./new_files You can create a new (empty) file in this directory with the touch command. Sometimes you need to create a new file, then write data to it. Try this out touch file_name; ls You can also create a file with data inside it with the cat &gt; command. Type in the following lines into your Terminal window. When complete, type control-D to be done and return to the Terminal prompt. cat stands for concatenate. cat &gt; file2.txt cat1 cat2 cat3 Now you can list the contents of this file with the cat command below. Give this a try cat file2.txt You can also list the directory of your new_files folder with ls to see the new folder contents. Try this ls Note that you don’t need to use the Terminal to run bash commands. You can do this from an Rmarkdown file. Take a moment to run pwd in your Terminal, to get the current directory. Now open Rstudio, and a new Rmarkdown document. Copy the path to the current directory from the Terminal. Switch back to the Rmarkdown document. Select one of the R code chunks (note the {r} at the top) and delete it. Now click on the Insert dropdown at the top of the document, and insert a Bash chunk. Now add UNIX commands (separated by a semicolon), like cd (paste in path here); pwd; ls; cat file2.txt Then run this chunk. Now you can run terminal commands directly from Rmarkdown! 11.6 Cleaning Up OK, now we are done with the file file2.txt and the directory new_files. Let’s get rid of them with rm (for removing files) and rmdir for removing directories. In order, we will - Make sure we are in the right directory - remove the file with rm file2.txt - go up one level of the directory with cd .. - remove the directory with rmdir new_files Give this a try pwd; rm file2.txt; cd ..; rmdir new_files Verify all of this in your Documents window. This is great. But you can imagine a situation in which you mistakenly rm a file (or directory) that you actually needed. Unlike your usual user interface, when a file is removed at the command line, it is gone. It is not in the trash folder. It is gone. There is something to be said for modern user interfaces, which are built for humans, who occasionally make mistakes. Sometimes we do want files or folders back. 11.7 Other helpful file commands Here are some file commands worth knowing cat filename - to print out whole file to your monitor less filename - to print out the first page of a file, and you can scroll through each page one at a time head filename - print first 10 lines of a file tail filename - print last 10 lines of a file cp file1 file2 - copy file1 to file2 mv file1.txt file.2.txt file3.txt new_folder - move 3 files to a new folder 11.8 What about R? So now you can get around directories, and find your files in the Terminal window, but you really want to run R. You can launch an R session from the Terminal Window (if you have R installed on your computer) by typing the letter R at the Terminal prompt Launch R R You get the usual R intro, including version number, and the R&gt; prompt. Now you can run R in interactive mode with available datasets, or your own datasets. Try a few simple commands with the mtcars dataset. Give the examples below a try. You can use q() to quit back to the terminal (and reply “n” to not save the workplace image). head(mtcars) ## mpg cyl disp hp drat wt qsec vs am ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 ## gear carb ## Mazda RX4 4 4 ## Mazda RX4 Wag 4 4 ## Datsun 710 4 1 ## Hornet 4 Drive 3 1 ## Hornet Sportabout 3 2 ## Valiant 3 1 mtcars %&gt;% filter(mpg &gt; 25) %&gt;% select(starts_with(&#39;m&#39;)|starts_with(&#39;c&#39;)) ## mpg cyl carb ## Fiat 128 32.4 4 1 ## Honda Civic 30.4 4 2 ## Toyota Corolla 33.9 4 1 ## Fiat X1-9 27.3 4 1 ## Porsche 914-2 26.0 4 2 ## Lotus Europa 30.4 4 2 11.9 What about just a few lines of R? Sometimes you will want to call R, run some code, and be done with R. You can call R, run a few lines, and quit in one go. Just add the flag -e (for evaluate) to the call to R, and put the R commands in quotes. Try the example below (note that this will not work if you are still in R - be sure you are back in the terminal with the % or $ prompt) R -e &quot;head(mtcars)&quot; or this example - note that single or double quotes does not matter - as long as they match. Try this R -e &#39;install(palmerpenguins)&#39; You can also string together several commands with the semicolon between them. Try the example below. R -e &#39;library(palmerpenguins);data(penguins);tail(penguins)&#39; 11.10 Running an R Script from the Terminal Now we are stepping up a level - you have an R script that you have carefully created and saved as the myscript.R file. How do you run this from the Terminal? This is easy - just call the Rscript command with your file name. Pick out a short R file you have written, make sure you are in the right directory where the file is, and use it as in the example below. Rscript myscript.R This launches R, runs your script, saves resulting output (if your script includes save or ggsave commands), closes R, and sends you back to the Terminal. Very simple. 11.11 Rendering an Rmarkdown file from the Terminal This is a little different, as you can’t just run an Rmarkdown file. Normally you would use the dropdown button to knit your file from Rstudio. But you can use the rmarkdown::render command to render your files to HTML, PDF, Word, Powerpoint, etc. Pick out a simple Rmd file like output_file.Rmd below, make sure you are in the right directory where the file is, and try something like the example below. Note that this is one case where nesting different types of quotes (single vs. double) can come in handy. It helps to use single quotes around your filename and double quotes around the rmarkown::render command. Try it out Rscript -e &quot;rmarkdown::render(&#39;output_file.Rmd&#39;)&quot; So there you have it! Just enough to get you started with R from the command line. For further reading, check out these helpful links: Data Science at the Command line (e-book) R in Batch mode on Linux R tutorial for a Unix Environment The Linux Command Line: A Complete Introduction - a whole book on the topic Software Carpentry Command-Line Programs Scheduling jobs with cron "],["title-holder.html", "Title holder", " Title holder "],["references-1.html", "References", " References "]]
